npm i express
npm i mongoose
npm i ejs
node app.js


model:-
// models/user.js
const mongoose = require('mongoose');

// Define the user schema
const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  age: { type: Number, required: true }
});

// Create the User model
const User = mongoose.model('User', userSchema);

// Export the User model
module.exports = User;


app.js
const express = require('express');
const mongoose = require('mongoose');
const User = require('./models/user');

const app = express();

// Set EJS as the view engine
app.set('view engine', 'ejs');

// Middleware to parse JSON requests and URL-encoded data from forms
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/Test')
  .then(() => console.log('Connected to MongoDB'))
  .catch((err) => console.error('Could not connect to MongoDB:', err));

// Route for the homepage
app.get('/', (req, res) => {
  res.render('index', { title: 'Home' });
});

// Route to display all users
app.get('/users', async (req, res) => {
  try {
    const users = await User.find();
    res.render('users', { users });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route to create a new user (renders a form)
app.get('/users/new', (req, res) => {
  res.render('newUser');
});

// Route to handle form submission for creating a new user
app.post('/users', async (req, res) => {
  try {
    const user = new User(req.body);
    await user.save();
    res.redirect('/users');
  } catch (error) {
    res.status(400).send(error);
  }
});

// Route to edit a user (renders the form with existing data)
app.get('/users/edit/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).send('User not found');
    res.render('editUser', { user });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route to handle form submission for updating a user
app.post('/users/edit/:id', async (req, res) => {
  try {
    const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!user) return res.status(404).send('User not found');
    res.redirect('/users');
  } catch (error) {
    res.status(400).send(error);
  }
});

// Route to delete a user
app.post('/users/delete/:id', async (req, res) => {
  try {
    const user = await User.findByIdAndDelete(req.params.id);
    if (!user) return res.status(404).send('User not found');
    res.redirect('/users');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route to render the login page
app.get('/login', (req, res) => {
    res.render('login');
  });
  
  // Route to handle login form submission
  app.post('/login', async (req, res) => {
    const { name, age } = req.body;
  
    try {
      // Find user by name and age (acting as username and password)
      const user = await User.findOne({ name, age });
      
      if (user) {
        // Login successful
        res.send(`<h1>Welcome, ${user.name}!</h1><p>Login successful!</p><a href="/users">Go to Users List</a>`);
      } else {
        // Login failed
        res.send('<h1>Login failed!</h1><p>Invalid username or password.</p><a href="/login">Try again</a>');
      }
    } catch (error) {
      res.status(500).send('Error during login');
    }
  });

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});



editUser.ejs

<!DOCTYPE html>
<html>
<head>
  <title>Edit User</title>
</head>
<body>
  <h1>Edit User</h1>
  <form action="/users/edit/<%= user._id %>" method="POST">
    <label for="name">Name:</label>
    <input type="text" name="name" id="name" value="<%= user.name %>" required><br>

    <label for="email">Email:</label>
    <input type="email" name="email" id="email" value="<%= user.email %>" required><br>
    
    <label for="age">Age:</label>
    <input type="number" name="age" id="age" value="<%= user.age %>" required><br>

    <button type="submit">Update User</button>
  </form>
  <a href="/users">Back to User List</a>
</body>
</html>





index.ejs
<!DOCTYPE html>
<html>
<head>
  <title><%= title %></title>
</head>
<body>
  <h1>Welcome to the User Management System</h1>
  <a href="/users">View Users</a> | <a href="/users/new">Add New User</a>
</body>
</html>

login.ejs
<!DOCTYPE html>
<html>
<head>
  <title>Login</title>
</head>
<body>
  <h1>Login</h1>
  <form action="/login" method="POST">
    <label for="name">Username (Name):</label>
    <input type="text" name="name" id="name" required><br>

    <label for="age">Password (Age):</label>
    <input type="password" name="age" id="age" required><br>

    <button type="submit">Login</button>
  </form>
</body>
</html>




newUser.ejs
<!DOCTYPE html>
<html>
<head>
  <title>Add New User</title>
</head>
<body>
  <h1>Add a New User</h1>
  <form action="/users" method="POST">
    <label for="name">Name:</label>
    <input type="text" name="name" id="name" required><br>

    <label for="email">Email:</label>
    <input type="email" name="email" id="email" required><br>

    <label for="age">Age:</label>
    <input type="number" name="age" id="age" required><br>

    <button type="submit">Create User</button>
  </form>
  <a href="/users">Back to User List</a>
</body>
</html>



users.ejs
<!DOCTYPE html>
<html>
<head>
  <title>User List</title>
</head>
<body>
  <h1>List of Users</h1>
  <table border="1">
    <thead>
      <tr>
        <th>Name</th>
        <th>Email</th>
        <th>Age</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% users.forEach(function(user) { %>
        <tr>
          <td><%= user.name %></td>
          <td><%= user.email %></td>
          <td><%= user.age %></td>
          <td>
            <!-- Edit button -->
            <a href="/users/edit/<%= user._id %>">Edit</a>

            <!-- Delete button (a form with POST method to delete the user) -->
            <form action="/users/delete/<%= user._id %>" method="POST" style="display:inline;">
              <button type="submit">Delete</button>
            </form>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>
  <a href="/users/new">Add New User</a>
</body>
</html>

===========file===
npm i express
npm i multer

server.js

const express = require('express')
const multer  = require('multer')
const path = require('path');
const app = express();
app.use(express.static('public'));  
app.use(express.urlencoded({extended: true}));
app.listen(8000);

var options=multer.diskStorage(
  {
    destination:(req,file,cb)=>{
      if(file.mimetype!=="image/jpeg")
        return cb("cant")
      cb(null,"./uploads")  
    } ,
    filename: (req,file,cb)=>{

    }
  })
  var options=multer.diskStorage({destination:function(req,file,cb){
    console.log(file)
    if (file.mimetype !== 'image/jpeg') 
      { 
        return cb('Invalid file format'); //cb(err)
      }
      
      cb(null, './uploads');
  } ,filename:function(req,file,cb){
    console.log(file)
    console.log(path.extname(file.originalname))
    cb(null, (Math.random().toString(30)).
          slice(5, 10) + Date.now() 
          + path.extname(file.originalname));
  }});

  var upload= multer({ storage: options });
  
  app.get("/",function(req,res){
    res.send("<a href='file_upload.html'>Upload your file here</a>")
  })
  
  app.post("/file_upload",upload.single("myfile"),function(req,res){
    res.send("Files are uploaded "+req.body.fname +" "+req.body.lname);
  });
  
  app.post("/photos_upload",upload.array("photos",2),function(req,res){
    res.send("File is uploaded "+req.body.fname+" "+req.body.lname);
  });
  
  app.use(function (err, req, res, next) {
    if (err instanceof multer.MulterError) 
    {
      console.log("ERRRR");
      res.status(500).send("file upload  err "+err.message);
  
    }
    else 
    {
      console.log("ERRRR "+err);
    }
  });

2 folders Uplods public:-file_upload.html 

file_upload.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=<device-width>, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Singe file upload</h1>
    <form method="post" enctype="multipart/form-data" action="file_upload">
        First Name: <input type="text" name="fname"><br>
        Last Name: <input type="text" name="lname"><br>
        File: <input type="file" name="myfile"><br>
        <input type="submit">
    </form>
    <h1>Multi file upload</h1>
    <form method="post" enctype="multipart/form-data" action="photos_upload">
        First Name: <input type="text" name="fname"><br>
        Last Name: <input type="text" name="lname"><br>
        File: <input type="file" name="photos" multiple="multiple"><br>
        <input type="submit">
    </form>
</body>
</html>
